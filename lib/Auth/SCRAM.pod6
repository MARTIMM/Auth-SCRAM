#!/usr/bin/env perl6
#
use v6.c;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=begin Xhtml
<style>
  pre {
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
  td {
    vertical-align:     top;
  }
</style>
=end Xhtml

=TITLE class Auth::SCRAM

=SUBTITLE Authentication using SCRAM

  unit package Auth;
  class SCRAM { ... }

=head1 Synopsis

  class MyClient {

    method client-first ( Str:D $client-first-message --> Str ) {

      # Send $client-first-message to server;

      # Return server response is server first message
    }

    method client-final ( Str:D $client-final-message --> Str ) {

      # Send $client-final-message to server.

      # Return server response is server final message
    }

    method error ( Str:D $message --> Str ) {
      # Errors? nah ... (Famous last words!)
    }
  }

  my Auth::SCRAM $sc .= new(
    :username<user>,
    :password<pencil>,
    :client-side(MyClient.new),
  );
  isa-ok $sc, Auth::SCRAM;

  my Str $error = $sc.start-scram;

While a client authentication is shown above Auth::SCRAM itself does not do any
of this. The user of the Auth::SCRAM class provides a client-side or a
server-side object with which the initialization phase will upgrade the object
to a Auth::SCRAM object with a Auth::SCRAM::Client or Auth::SCRAM::Server role.

Specific details are shown in the pods for these role modules.


=head1 Methods
=head2 new

Defined as

  submethod BUILD (
    Str:D :$username!,
    Str:D :$password!,

    Callable :$CGH = &sha1,
    Str :$authzid,
    :$client-side,
    :$server-side,
  )

Initialize the process. The Cryptographic Hash function C<$CGH> is by default
set to SHA1. The authorization id($authzid) is needed when you want things done with the privileges of someone else. The client-side and server-side are objects
with methods called by the SCRAM methods. Only one of the client or server
object can be defined.


=head2 start-scram

Defined as

  method start-scram( Str :$client-first-message --> Str ) {

Start authentication. An error message is returned when an error is encountered.
This is the same error sent to the C<error()> method mentioned above. When
successful, it returns an empty string (''). $client-first-message must be
defined when a server object is provided to the C<new()> method.

=head2 

=end pod
